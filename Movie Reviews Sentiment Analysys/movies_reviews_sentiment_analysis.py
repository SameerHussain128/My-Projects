# -*- coding: utf-8 -*-
"""Movies Reviews Sentiment Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11OfydWl37ejxxgzSaDC4XXQswbXXd3CQ
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/drive/MyDrive/Machine Learning Projects/IMDB Movie reviews sentiment analysis/IMDB Dataset.csv')

df.head()

df.info()

df.describe()

df['sentiment'].unique()

df['sentiment'].value_counts()

"""###**Apply Label Encoding to make Target veriable to make it numeric from categorical**"""

from sklearn.preprocessing import LabelEncoder
label = LabelEncoder()
df['sentiment'] = label.fit_transform(df['sentiment'])

df.head()  # Positive = 1 , Negative = 0

"""###**Divide Data into Independent and Dependent**"""

X = df['review']
y = df['sentiment']

print(X)

print(y)

nltk.download('stopwords')

"""###**Remove all special and numeric character from data and also remove stopwords and apply stemming**"""

import nltk
import re
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer

ps = PorterStemmer()
corpus = []

for i in range(len(X)):
  print(i)
  review = re.sub("[^a-zA-Z]"," ", X[i])
  review = review.lower()
  review = review.split()
  review = [ps.stem(word) for word in review if word not in set(stopwords.words("english"))]
  review = " ".join(review)
  corpus.append(review)

corpus

"""### **Apply TFidf Vectorizer to make Text data in Vectors**

1.   List item
2.   List item


"""

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
cv = TfidfVectorizer(max_features=5000)
X = cv.fit_transform(corpus).toarray()

X.shape

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2, random_state=0)

X_train.shape ,X_test.shape ,y_train.shape ,y_test.shape

"""###**Implementing Naive bayes Model**

> Indented block


"""

from sklearn.naive_bayes import MultinomialNB
mnb = MultinomialNB()
mnb.fit(X_train,y_train)

pred = mnb.predict(X_test)
pred

"""### **Performance Matrix, accuracy and classification report**"""

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
print(accuracy_score(y_test,pred))
print(confusion_matrix(y_test,pred))
print(classification_report(y_test,pred))

"""###**Difference between Actual and predicted data**"""

pd.DataFrame(np.c_[y_test, pred] ,columns=["Actual" , "Predicted"])

"""###**Saving Model - Pickling**"""

import pickle
pickle.dump(cv, open("count-vectorizer.pkl", "wb"))
pickle.dump(mnb, open("Movies_Review_Classification.pkl", "wb")) # pos - 1 , neg - 0

"""###**Loading Naive bayes Model and TfidVectorizer**"""

save_cv = pickle.load(open("count-vectorizer.pkl", "rb"))
model = pickle.load(open("Movies_Review_Classification.pkl", "rb"))

"""###**Define Function to Test model**"""

def test_model(sentence):
  sen = save_cv.transform([sentence]).toarray()
  res = model.predict(sen)[0]
  if res == 1:
    return 'Positive review'
  else:
    return 'Negative review'

"""###**Testing My Model with some Reviews and Predicting Result**"""

sen = 'This is the wonderful movie'
res = test_model(sen)
print(res)

sen = 'This is the worst movie'
res = test_model(sen)
print(res)

sen = 'This is one of the best movie of my life superb movie relly enjoyed it'
res = test_model(sen)
print(res)

sen = ' movie is bad, i dont like it'
res = test_model(sen)
print(res)